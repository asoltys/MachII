<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright: GreatBizTools, LLC
Author: Peter J. Farrell (peter@mach-ii.com)
$Id: build.xml 6362 2007-09-07 03:06:02Z pfarrell $

Requirements:
- ANT 1.5+
- Apache Net-Commons (if using FTP options)
- SVNAnt task

Notes:

-->
<project
	name="Mach-II Framework"
	default="build"
	basedir=".">
	
	<description>Mach-II Framework</description>
	
	<!-- Properties -->
	<property name="dest" location="./dest"/>
	<property name="zip" location="./zip"/>
	<property name="majorVersion" value="1-5-0"/>
	<property name="baseSvnUrl" value="http://svn.mach-ii.com/framework/${majorVersion}/"/>
	<property name="debug" value="false"/>
	
	<property name="ftp.server" value="mach-ii.com"/>
	<property name="ftp.user" value="machii"/>
	<property name="ftp.nightly.dir" value="/var/www/machii/m2website/public/nightly/"/>
	
	<!-- ReIDs -->
	<fileset id="ftp.upload.fileset"
		dir="${zip}">
		<include name="*.zip"/>
		<include name="*.zip.MD5"/>
	</fileset>

	<!-- Task defitions -->
	<taskdef resource="org/tigris/subversion/svnant/svnantlib.xml"/>
	
	<!-- Targets -->
	<target name="clean">
		<echo message="---------------------------------------------"/>
		<echo message="Cleaning"/>
		<echo message="---------------------------------------------"/>
		<delete dir="${dest}"/>
		<delete dir="${zip}"/>
	</target>

	<target name="build" depends="clean,lastCommitRevision">
		<echo message="---------------------------------------------"/>
		<echo message="Creating a build"/>
		<echo message="---------------------------------------------"/>
		<mkdir dir="${dest}"/>
		<echo message="Copying files to dest"/>
		<copy todir="${dest}/MachII/"
			verbose="${debug}"
			preservelastmodified="true">
			<fileset dir="${basedir}">
				<exclude name="dest/"/>
				<exclude name="zip/"/>
			</fileset>
			<filterset begintoken="@" endtoken="@">
				<filter token="minorVersion" value="${buildVersion}"/>
			</filterset>
		</copy>
		<echo message="Making copies of CHANGELOG, LICENSE, NOTICE and README to .txt files for windows"/>
		<copy file="${dest}/MachII/CHANGELOG"
			tofile="${dest}/MachII/CHANGELOG.txt"
			preservelastmodified="true"
			verbose="${debug}"/>
		<copy file="${dest}/MachII/LICENSE"
			tofile="${dest}/MachII/LICENSE.txt"
			preservelastmodified="true"
			verbose="${debug}"/>
		<copy file="${dest}/MachII/NOTICE"
			tofile="${dest}/MachII/NOTICE.txt"
			preservelastmodified="true"
			verbose="${debug}"/>
		<copy file="${dest}/MachII/README"
			tofile="${dest}/MachII/README.txt"
			preservelastmodified="true"
			verbose="${debug}"/>
		<echo message="Built as version '${buildVersion}'"/>
	</target>
	
	<target name="buildDuckTyped" depends="build">
		<echo message="---------------------------------------------"/>
		<echo message="Duck typing the build"/>
		<echo message="---------------------------------------------"/>
		<echo message="Regexing 'returntype' attribute from cffunctions"/>
		<replaceregexp match="(cffunction.*?)([ ]?returntype)[ ]*?=[ ]*?(.)(.*?)\3[ ]?"
			replace="\1 "
			flags="igm">
			<fileset dir="${dest}/MachII/"
				includes="**/*.cfc"/>
		</replaceregexp>
		<echo message="Regexing 'required' attribute from cfarguments"/>
		<replaceregexp match="(cfargument.*?)([ ]?required)[ ]*?=[ ]*?(.)(.*?)\3[ ]?"
		   replace="\1 "
			flags="igm">
		   	<fileset dir="${dest}/MachII/"
	   			includes="**/*.cfc"/>
		</replaceregexp>
		<echo message="Regexing 'type' attribute from cfarguments"/>
		<replaceregexp match="(cfargument.*?)([ ]?type)[ ]*?=[ ]*?(.)(.*?)\3[ ]?"
			replace="\1 "
			flags="igm">
	      	<fileset dir="${dest}/MachII/"
	      		includes="**/*.cfc"/>
		</replaceregexp>
		<echo message="---------------------------------------------"/>
		<echo message="Created duck typed build located in '${dest}'"/>
		<echo message="---------------------------------------------"/>
	</target>
	
	<target name="lastCommitRevision" unless="buildVersion">
		<echo message="---------------------------------------------"/>
		<echo message="Gettting last commit revision number"/>
		<echo message="---------------------------------------------"/>
		<svn>
			<status path="${basedir}" lastChangedRevisionProperty="buildVersion" />
		</svn>
	</target>
	
	<target name="zip-init">
		<echo message="Gettting last commit revision number"/>
		<svn>
			<status path="${basedir}" lastChangedRevisionProperty="svnBuildVersion" />
		</svn>
		<input addProperty="buildVersion"
			message="Input a build number or minor version level (0-9) (defaults to SVN build number):"
			defaultvalue="${svnBuildVersion}"/>
	</target>
	
	<target name="zip" depends="zip-init,build">
		<echo message="---------------------------------------------"/>
		<echo message="Zipping the build"/>
		<echo message="---------------------------------------------"/>
		<mkdir dir="${zip}"/>
		<zip destfile="${zip}/MachII_${majorVersion}.zip"
			basedir="${dest}"/>
		<echo message="Creating MD5 checksum for zip"/>
		<checksum file="${zip}/MachII_${majorVersion}.zip"/>
		<echo message="---------------------------------------------"/>
		<echo message="Created zip located at'${zip}/MachII_${majorVersion}.zip'"/>
		<echo message="---------------------------------------------"/>
	</target>
	
	<target name="zipDuckTyped" depends="zip-init,buildDuckTyped">
		<echo message="---------------------------------------------"/>
		<echo message="Zipping the duck typed build"/>
		<echo message="---------------------------------------------"/>
		<mkdir dir="${zip}"/>
		<zip destfile="${zip}/MachII_${majorVersion}_ducktyped.zip"
			basedir="${dest}"/>
		<echo message="Creating MD5 checksum for zip"/>
		<checksum file="${zip}/MachII_${majorVersion}_ducktyped.zip"/>
		<echo message="---------------------------------------------"/>
		<echo message="Created zip located at'${zip}/MachII_${majorVersion}_ducktyped.zip'"/>
		<echo message="---------------------------------------------"/>
	</target>
	
	<target name="zipNightly" depends="build">
		<echo message="---------------------------------------------"/>
		<echo message="Building nightly zip"/>
		<echo message="---------------------------------------------"/>
		<mkdir dir="${zip}"/>
		<tstamp>
			<format property="formattedDatetime" pattern="yyyy-MM-dd"/>
		</tstamp>
		<zip destfile="${zip}/MachII_${majorVersion}_nightly_${formattedDatetime}.zip"
			basedir="${dest}"/>
		<checksum file="${zip}/MachII_${majorVersion}_nightly_${formattedDatetime}.zip"/>
		<echo message="---------------------------------------------"/>
		<echo message="Created zip located at'${zip}/MachII_${majorVersion}_nightly_${formattedDatetime}.zip'"/>
		<echo message="---------------------------------------------"/>
	</target>
	
	<target name="ftp-init">
		<input addProperty="ftp.password"
			message="Please enter the password for FTP user named '${ftp.user}':"/>
		<fail unless="ftp.password">You must set the ftp.password property for ftp as command line arg (e.g. -Dftp.password=YOURPWD) or input the password if you have manually run this target.</fail>
	</target>
	
	<target name="ftp-zipNightly" depends="ftp-init,zipNightly">
		<echo message="---------------------------------------------"/>
		<echo message="FTP-ing nightly build" />
		<echo message="---------------------------------------------"/>
		<ftp server="${ftp.server}"
			userid="${ftp.user}"
			password="${ftp.password}"
			action="put"
			remotedir="${ftp.nightly.dir}"
			verbose="${debug}">
			<fileset refid="ftp.upload.fileset"/>
		</ftp>
	</target>
	
	<target name="branch" depends="svnLogin">
		<echo message="---------------------------------------------"/>
		<echo message="Creating a branch" />
		<echo message="---------------------------------------------"/>
		<input addproperty="branchName"
			message="Please define a name for this branch:"/>
		<input addproperty="revision"
			message="What revision would you like to branch from (a date with the following format : MM/DD/YYYY HH:MM AM_PM, a revision number, HEAD, BASE, COMMITED or PREV):"
			defaultvalue="HEAD" />
		<input addproperty="message"
			message="Commit message:"/>
		<svn username="${svn.usr}" password="${svn.pwd}">
			<copy srcPath="${basedir}"
				destUrl="${baseSvnUrl}/branches/${branchName}"
				message="${message}"
				revision="${revision}"/>
		</svn>
	</target>
	
	<target name="svnLogin">
		<input addproperty="svn.usr"
			message="SVN Username:"/>
		<input addproperty="svn.pwd"
			message="SVN password:"/>		
	</target>
	
</project>